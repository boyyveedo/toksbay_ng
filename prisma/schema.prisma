generator client {
  provider = "prisma-client-js"


}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CUSTOMER
}

enum Condition {
  NEW
  USED
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentType {
  CARD
  BANK_TRANSFER
  PAY_ON_DELIVERY
}

enum DeliveryStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
}

enum UserStatus {
  PENDING
  ACTIVE
  SUSPENDED
  BANNED
}

enum VerificationType {
  EMAIL
  PHONE
}

model User {
  id          String     @id @default(uuid())
  email       String     @unique
  password    String?
  firstName   String
  lastName    String
  profile       Profile?
  phoneNumber String?
  secretKey   String?  
  providerId  String?
  provider    String?
  role        Role       @default(CUSTOMER)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?
  isVerified  Boolean    @default(false)
  status      UserStatus @default(PENDING)

  // Relations
  addresses        Address[]
  carts            Cart[]
  orders           Order[]
  payments         Payment[]
  reviews          Review[]
  products         Product[]         @relation("SellerProducts")
  sentMessages     Message[]         @relation("Sender")
  receivedMessages Message[]         @relation("Receiver")
  reports          ReportedProduct[]
  verifications    Verification[]
  passwordResets   PasswordReset[]
  sessions      Session[]


  @@unique([providerId, provider])
}

model Category {
  id        String    @id @default(uuid()) @map("id")
  name      String    @unique @map("name")
  slug      String    @unique @map("slug")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  // Relations
  products  Product[]
}

model Product {
  id            String    @id @default(uuid()) @map("id")
  title         String    @map("title")
  description   String    @map("description")
  price         Decimal   @map("price") @db.Decimal(10, 2)
  discountPrice Decimal?  @map("discount_price") @db.Decimal(10, 2)
  brand         String?   @map("brand")
  condition     Condition @default(USED) @map("condition")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  categoryId    String    @map("category_id")
  category      Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  // Relations
  seller     User              @relation("SellerProducts", fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId   String            @map("seller_id")
  images     ProductImage[]
  cartItems  CartItem[]
  orderItems OrderItem[]
  reviews    Review[]
  reports    ReportedProduct[]
}

model ProductImage {
  id        String  @id @default(uuid()) @map("id")
  url       String  @map("url")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @map("product_id")
}

model Cart {
  id        String   @id @default(uuid()) @map("id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  items CartItem[]
}

model CartItem {
  id        String  @id @default(uuid()) @map("id")
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String  @map("cart_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @map("product_id")
  quantity  Int     @default(1) @map("quantity")

  @@unique([cartId, productId])
}

model Order {
  id             String         @id @default(uuid()) @map("id")
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String         @map("user_id")
  address        Address        @relation(fields: [addressId], references: [id], onDelete: Cascade)
  addressId      String         @map("address_id")
  totalAmount    Decimal        @map("total_amount") @db.Decimal(10, 2)
  status         OrderStatus    @default(PENDING) @map("status")
  paymentType    PaymentType    @default(CARD) @map("payment_type")
  deliveryStatus DeliveryStatus @default(PENDING) @map("delivery_status")
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")

  items   OrderItem[]
  payment Payment?
}

model OrderItem {
  id        String  @id @default(uuid()) @map("id")
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String  @map("order_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @map("product_id")
  quantity  Int     @default(1) @map("quantity")
  price     Decimal @map("price") @db.Decimal(10, 2)
}

model Payment {
  id          String      @id @default(uuid()) @map("id")
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String      @map("user_id")
  order       Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     String      @unique @map("order_id")
  amount      Decimal     @map("amount") @db.Decimal(10, 2)
  status      String      @map("status")
  reference   String?     @unique @map("reference") 
  paymentType PaymentType @default(CARD) @map("payment_type")
  createdAt   DateTime    @default(now()) @map("created_at")
}

model Address {
  id         String   @id @default(uuid()) @map("id")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @map("user_id")
  street     String   @map("street")
  city       String   @map("city")
  state      String   @map("state")
  orders     Order[] // One address can be used in multiple orders
  country    String   @map("country")
  postalCode String   @map("postal_code")
  createdAt  DateTime @default(now()) @map("created_at")
}

model Review {
  id        String   @id @default(uuid()) @map("id")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @map("product_id")
  rating    Int      @map("rating") // 1-5
  comment   String?  @map("comment")
  createdAt DateTime @default(now()) @map("created_at")
}

model ReportedProduct {
  id         String   @id @default(uuid()) @map("id")
  reporter   User     @relation(fields: [reporterId], references: [id])
  reporterId String   @map("reporter_id")
  product    Product  @relation(fields: [productId], references: [id])
  productId  String   @map("product_id")
  reason     String   @map("reason")
  createdAt  DateTime @default(now()) @map("created_at")
}

model Message {
  id         String   @id @default(uuid()) @map("id")
  sender     User     @relation("Sender", fields: [senderId], references: [id])
  senderId   String   @map("sender_id")
  receiver   User     @relation("Receiver", fields: [receiverId], references: [id])
  receiverId String   @map("receiver_id")
  content    String   @map("content")
  createdAt  DateTime @default(now()) @map("created_at")
}

model Verification {
  id               String   @id @default(uuid())
  userId           String
  verificationCode String
  expiresAt        DateTime
  isVerified       Boolean  @default(false)
  createdAt        DateTime @default(now())
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verifications")
}

model PasswordReset {
  id         String   @id @default(uuid())
  userId     String
  resetToken String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}



model Session {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token        String   @unique 
  createdAt    DateTime @default(now())
  expiresAt    DateTime

  @@map("sessions")
}


model Profile {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio         String?
  avatar      String?  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("profiles")
}